# frozen_string_literal: true

# rubocop:disable Metrics/ModuleLength
module FlagHelper
  mattr_accessor :flags_map, instance_writer: false
  self.flags_map = {
    'af' => 'za',
    'am' => 'et',
    'ar' => 'aa',
    'az' => 'az',
    'be' => 'by',
    'bg' => 'bg',
    'bn' => 'bd',
    'bs' => 'ba',
    'ca' => 'ad',
    'ceb' => 'ph',
    'co' => 'co',
    'cs' => 'cz',
    'cy' => 'cy',
    'da' => 'dk',
    'de' => 'de',
    'el' => 'gr',
    'en' => 'gb',
    'eo' => 'eo',
    'es' => 'es',
    'et' => 'ee',
    'eu' => 'eu',
    'fa' => 'ir',
    'fi' => 'fi',
    'fr' => 'fr',
    'ga' => 'ie',
    'gd' => 'gd',
    'gl' => 'gl',
    'gu' => 'in',
    'ha' => 'ha',
    'haw' => 'haw',
    'he' => 'il',
    'hi' => 'in',
    'hr' => 'hr',
    'ht' => 'ht',
    'hu' => 'hu',
    'hy' => 'am',
    'id' => 'id',
    'ig' => 'ng',
    'is' => 'is',
    'it' => 'it',
    'ja' => 'jp',
    'ka' => 'ge',
    'kk' => 'kz',
    'km' => 'kh',
    'ko' => 'kr',
    'ku' => 'iq',
    'ky' => 'kg',
    'la' => 'va',
    'lb' => 'lu',
    'lo' => 'la',
    'lt' => 'lt',
    'lv' => 'lv',
    'mg' => 'mg',
    'mi' => 'nz',
    'mk' => 'mk',
    'mn' => 'mn',
    'ms' => 'my',
    'mt' => 'mt',
    'my' => 'my',
    'nb' => 'no',
    'ne' => 'np',
    'nl' => 'nl',
    'no' => 'no',
    'ny' => 'mw',
    'pa' => 'in',
    'pl' => 'pl',
    'ps' => 'af',
    'pt' => 'pt',
    'ro' => 'ro',
    'ru' => 'ru',
    'rw' => 'rw',
    'si' => 'lk',
    'sk' => 'sk',
    'sl' => 'si',
    'sm' => 'sm',
    'sn' => 'zw',
    'so' => 'so',
    'sq' => 'al',
    'sr' => 'rs',
    'st' => 'ls',
    'sv' => 'se',
    'ta' => 'lk',
    'te' => 'in',
    'tg' => 'tj',
    'th' => 'th',
    'tk' => 'tm',
    'tl' => 'ph',
    'tr' => 'tr',
    'uk' => 'ua',
    'ur' => 'pk',
    'uz' => 'uz',
    'vi' => 'vn',
    'xh' => 'za',
    'zh' => 'cn',
    'zu' => 'za'
  }.freeze

  def language_to_flag_code(code)
    flags_map.fetch(code, 'fallback')
  end
end
# rubocop:enable Metrics/ModuleLength

# Dir.glob('frontend/i18n/countryFlags/*.svg').map{|f| f[/([[:alnum:]\s-]+)\.svg/, 1]}
# .map{|c| ISO3166::Country.find_country_by_name(c) }.reject{|v| v.blank?}.map{|c| c.languages }
